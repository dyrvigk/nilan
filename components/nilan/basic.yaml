external_components:
  - source: github://dyrvigk/nilan@main
    refresh: 0s

nilan:

select:
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Set user function"
    id: nilan_set_user_function
    address: 601
    force_new_range: true
    use_write_multiple: true
    value_type: U_WORD
    optionsmap:
      "None" : 0
      "Extend" : 1
      "Inlet" : 2
      "Exhaust" : 3
      "External heater offset" : 4
      "Ventilate" : 5
      "Cooker Hood" : 6
      
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Set operation mode"
    id: nilan_set_operation_mode
    address: 1002
    force_new_range: true
    use_write_multiple: true
    value_type: U_WORD
    optionsmap:
      "Off" : 0
      "Heat" : 1
      "Cool" : 2
      "Auto" : 3

sensor:
#########################
#### INPUT REGISTERS ####
#########################

      
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Outlet temperature"
    id: nilan_outlet_temp_t4
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    value_type: S_WORD
    register_type: read
    address: 204
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Inlet (after heater) temperature"
    id: nilan_inlet_temp_t7
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    register_type: read
    address: 202
    filters:
      - multiply: 0.01

 
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Humidity"
    id: nilan_humidity
    unit_of_measurement: '%'
    accuracy_decimals: 1
    device_class: humidity
    register_type: read
    address: 221
    filters:
      - multiply: 0.01
    on_value: 
      - lambda: !lambda |-
          id(aqi_humidity).publish_state( (x < 35) ? "Too Dry" : 
                                          (x < 65) ? "Perfect" : 
                                          "Too Humid");

###########################
#### HOLDING REGISTERS ####
###########################
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Exhaust fan speed"
    id: nilan_exhaust_fan_speed
    unit_of_measurement: '%'
    icon: "mdi:percent"
    accuracy_decimals: 0
    register_type: holding
    address: 200
    filters:
      - multiply: 0.01
  
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Inlet fan speed"
    id: nilan_inlet_fan_speed
    unit_of_measurement: '%'
    icon: "mdi:percent"
    accuracy_decimals: 0
    register_type: holding
    address: 201
    filters:
      - multiply: 0.01

number:
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Ventilation speed set"
    id: nilan_ventilation_speed_set
    min_value: 0
    max_value: 4
    step: 1.0
    address: 1003
    force_new_range: true
    use_write_multiple: true

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Temperature set"
    id: nilan_target_temperature_set
    min_value: 12
    max_value: 30
    step: 1.0
    address: 1004
    force_new_range: true
    use_write_multiple: true
    multiply: 100

text_sensor:
  - platform: template
    name: "Air Quality Index Humidity (AQI)"
    id: aqi_humidity
    icon: mdi:water-percent 

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Operation mode"
    id: nilan_operation_mode
    register_type: read
    address: 1001
    lambda: !lambda |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0: mode_str = "Off"; break;
        case 1: mode_str = "Heat"; break;
        case 2: mode_str = "Cool"; break;
        case 3: mode_str = "Auto"; break;
        case 4: mode_str = "Service"; break;
        default: mode_str = "Unknown"; break;
      }
      return mode_str;

  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Control mode"
    id: nilan_control_state
    register_type: read
    address: 1002
    lambda: !lambda |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "Off"; break;
        case 1:  mode_str = "Shift"; break;
        case 2:  mode_str = "Stop"; break;
        case 3:  mode_str = "Start"; break;
        case 4:  mode_str = "Standby"; break;
        case 5:  mode_str = "Ventilation stop"; break;
        case 6:  mode_str = "Ventilation"; break;
        case 7:  mode_str = "Heating"; break;
        case 8:  mode_str = "Cooling"; break;
        case 9:  mode_str = "Hot water"; break;
        case 10: mode_str = "Legionella"; break;
        case 11: mode_str = "Cooling + hot water"; break;
        case 12: mode_str = "Central heating"; break;
        case 13: mode_str = "Defrost"; break;
        case 14: mode_str = "Frost secure"; break;
        case 15: mode_str = "Service"; break;
        case 16: mode_str = "Alarm"; break;
        default: mode_str = "Unknown"; break;
      }
      return mode_str;

climate:
  - platform: nilan
    name: Nilan
    current_temp_sensor_id: nilan_inlet_temp_t7
    target_temp_sensor_id: nilan_target_temperature_set
    fan_speed_sensor_id: nilan_ventilation_speed_set
    mode_select_id: nilan_set_operation_mode

output:
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    id: nilan_reset_alarm
    address: 400
    use_write_multiple: true
    value_type: U_WORD
    write_lambda: return 255;
    
button:
  - platform: output
    name: Reset alarm
    id: nilan_reset_alarm_button
    output: nilan_reset_alarm
    duration: 5s
